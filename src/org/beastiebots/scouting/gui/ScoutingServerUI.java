/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.beastiebots.scouting.gui;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.beastiebots.scouting.tournament.MatchData;
import org.beastiebots.scouting.tournament.Team;
import org.beastiebots.scouting.tournament.TeleopPerformance;
import org.beastiebots.scouting.tournament.Tournament;
import org.beastiebots.scouting.tournament.uploader.ScoutingServer;

/**
 *
 * @author Jacob
 */
public class ScoutingServerUI extends javax.swing.JFrame {

    private Tournament tournament;

    /**
     * Creates new form ScoutingServerUI
     */
    public ScoutingServerUI() {
        initComponents();
        tournament = new Tournament();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        fieldPanelRO1 = new org.beastiebots.scouting.autonomousPlotter.FieldPanelRO();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        checkBoxHang1 = new javax.swing.JCheckBox();
        spinnerAutoCube1 = new javax.swing.JSpinner();
        checkBoxFlag1 = new javax.swing.JCheckBox();
        checkBoxDoubleHang1 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        spinnerTeleopCubes1 = new javax.swing.JSpinner();
        jLabel22 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setColumnSelectionAllowed(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);
        jTable2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        fieldPanelRO1.setMult(1.0);
        fieldPanelRO1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("1");
        fieldPanelRO1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 99, -1, -1));

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("2");
        fieldPanelRO1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 86, -1, -1));

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("3");
        fieldPanelRO1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 68, -1, -1));

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("4");
        fieldPanelRO1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(102, 54, -1, -1));

        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("4");
        fieldPanelRO1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(131, 173, -1, -1));

        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("3");
        fieldPanelRO1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(147, 160, -1, -1));

        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("2");
        fieldPanelRO1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(163, 142, -1, -1));

        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("1");
        fieldPanelRO1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(179, 128, -1, -1));

        checkBoxHang1.setText("Hang");
        checkBoxHang1.setEnabled(false);

        spinnerAutoCube1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 4, 1));
        spinnerAutoCube1.setEnabled(false);

        checkBoxFlag1.setText("Flag");
        checkBoxFlag1.setEnabled(false);

        checkBoxDoubleHang1.setText("Double Hang");
        checkBoxDoubleHang1.setEnabled(false);

        jLabel4.setText("Auto cube:");

        jLabel21.setText("Approx teleop cubes");

        spinnerTeleopCubes1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        spinnerTeleopCubes1.setEnabled(false);

        jLabel22.setText("Endgame:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldPanelRO1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxHang1)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(spinnerAutoCube1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel21)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinnerTeleopCubes1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(checkBoxDoubleHang1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBoxFlag1))))
                    .addComponent(jLabel22))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fieldPanelRO1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerAutoCube1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(spinnerTeleopCubes1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkBoxHang1)
                            .addComponent(checkBoxDoubleHang1)
                            .addComponent(checkBoxFlag1)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        (new ScoutingServer(tournament, this)).execute();
        String[] columnNames = {"Team Number"};
        DefaultTableModel model = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        jTable1.setModel(model);
        model.setColumnIdentifiers(columnNames);
        jTable1.setRowSorter(new TableRowSorter(model));
        for (Team team : tournament.getTeams()) {
            Object[] o = new Object[1];
            o[0] = Integer.toString(team.getNumber());
            model.addRow(o);
        }
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if (!lse.getValueIsAdjusting()) {
                    String[] columnNames2 = {"Match Number"};
                    DefaultTableModel model2 = new DefaultTableModel();
                    jTable2.setModel(model2);
                    model2.setColumnIdentifiers(columnNames2);
                    jTable2.setRowSorter(new TableRowSorter(model2));
                    for (MatchData match : tournament.getTeamByNumber(Integer.parseInt((String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0))).getMatchData()) {
                        boolean found = false;
                        Object[] o = new Object[1];
                        o[0] = match.getMatchNumber();
                        for (int i = 0; i < jTable2.getModel().getRowCount(); i++) {
                            if (((String) jTable2.getModel().getValueAt(i, 0)).equals(match.getMatchNumber())) {
                                found = true;
                            }
                        }
                        if (!found) {
                            ((DefaultTableModel) jTable2.getModel()).addRow(o);
                        }
                    }
                    jTable2.clearSelection();
                    fieldPanelRO1.reset();
                }
            }
        });

        String[] columnNames2 = {"Match Number"};
        DefaultTableModel model2 = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        jTable2.setModel(model2);
        model2.setColumnIdentifiers(columnNames2);
        jTable2.setRowSorter(new TableRowSorter(model2));
        jTable2.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if (!lse.getValueIsAdjusting()) {
                    if (jTable2.getSelectedRow() > -1) {
                        fieldPanelRO1.setAutonomousRoutine(tournament.getTeamByNumber(Integer.parseInt((String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0))).getMatchDataByNumber((String) jTable2.getModel().getValueAt(jTable2.getSelectedRow(), 0)).getAuto());
                        TeleopPerformance teleop = tournament.getTeamByNumber(Integer.parseInt((String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0))).getMatchDataByNumber((String) jTable2.getModel().getValueAt(jTable2.getSelectedRow(), 0)).getTeleop();
                        checkBoxDoubleHang1.setSelected(teleop.isDoubleHang());
                        checkBoxHang1.setSelected(teleop.isHang());
                        checkBoxFlag1.setSelected(teleop.isFlag());
                        spinnerTeleopCubes1.setValue(teleop.getNumCubes());
                    }
                }
            }
        });
    }//GEN-LAST:event_formWindowOpened

    public void updateUI() {
        for (Team team : tournament.getTeams()) {
            boolean found = false;
            Object[] o = new Object[1];
            o[0] = String.format("%04d", team.getNumber());
            for (int i = 0; i < jTable1.getModel().getRowCount(); i++) {
                if ((Integer.parseInt((String) jTable1.getModel().getValueAt(i, 0))) == team.getNumber()) {
                    found = true;
                }
            }
            if (!found) {
                ((DefaultTableModel) jTable1.getModel()).addRow(o);
            }
        }
        if (jTable1.getSelectedRow() > -1) {
            String[] columnNames2 = {"Match Number"};
            DefaultTableModel model2 = new DefaultTableModel() {

                @Override
                public boolean isCellEditable(int row, int column) {
                    //all cells false
                    return false;
                }
            };
            jTable2.setModel(model2);
            model2.setColumnIdentifiers(columnNames2);
            jTable2.setRowSorter(new TableRowSorter(model2));
            for (MatchData match : tournament.getTeamByNumber(Integer.parseInt((String) jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0))).getMatchData()) {
                boolean found = false;
                Object[] o = new Object[1];
                o[0] = match.getMatchNumber();
                for (int i = 0; i < jTable2.getModel().getRowCount(); i++) {
                    if (((String) jTable2.getModel().getValueAt(i, 0)).equals(match.getMatchNumber())) {
                        found = true;
                    }
                }
                if (!found) {
                    ((DefaultTableModel) jTable2.getModel()).addRow(o);
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());

        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScoutingServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ScoutingServerUI().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBoxDoubleHang1;
    private javax.swing.JCheckBox checkBoxFlag1;
    private javax.swing.JCheckBox checkBoxHang1;
    private org.beastiebots.scouting.autonomousPlotter.FieldPanelRO fieldPanelRO1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JSpinner spinnerAutoCube1;
    private javax.swing.JSpinner spinnerTeleopCubes1;
    // End of variables declaration//GEN-END:variables
}
